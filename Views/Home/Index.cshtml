@model PaginatedList<FinalProject_AdvancedDatabaseAndORMConcepts_SlackOverload.Models.Question>

@{
    ViewData["Title"] = "Home Page";
}

<h1>@ViewData["Title"]</h1>
<div>
    <a asp-action="PostNewQuestion">Ask Question</a>
    <a asp-action="Index" asp-route-sortOrder="Newest">Newest</a>
    <a asp-action="Index" asp-route-sortOrder="Active">Active</a>
</div>

@using (Html.BeginForm("Index", "Home", FormMethod.Get))
{
    <p>
        Find by Title: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
}

<table class="table">
    <thead>
        <tr>
            <th>
                Title
            </th>
            <th>
                NumberOfAnswers
            </th>
            <th>
                DateOfCreate
            </th>
            <th>
                DateOfClose
            </th>
            <th>
                User
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if(Model != null)
        {
            @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Answers.Count)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateOfCreate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateOfClose)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.User.UserName)
                    @if(@item.User.Reputation !=null)
                    {
                        <span style="font-size:10px; color:blue;">reputation: @item.User.Reputation</span>
                    }
                    
                </td>
                <td>
                    <a asp-action="QuestionDetails" asp-route-questionId="@item.Id">Details</a>
                </td>
            </tr> 
        }
}
    </tbody>
</table>
<br />

@*The properties HasPreviousPage and HasNextPage can be used to enable or disable Previous and Next paging buttons*@
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

@*Show current page index and total pages*@
Page @(Model.TotalPages < Model.PageIndex ? 0 : Model.PageIndex) of @Model.TotalPages

@*Go to previous page: pageIndex -1, and pass the pageNumber to Action Index*@
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-default @prevDisabled">
    Previous
</a>
@*Go to next page: pageIndex +1*@
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   class="btn btn-default @nextDisabled">
    Next
</a>
 
